#!@GUILE@ \
--no-auto-compile -e main -s
!#

;; Work Planner
;; Copyright (C) 2022 James Crake-Merani
;;;
;;; This program is free software: you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation, either version 3 of the License, or
;;; (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;FIXME: Assumes that this dir already exists.
(define items-dir "/home/jamescrake-merani/.local/share/work-planner/items.json")
(use-modules (work-planner command-line)
             (work-planner date-json)
             (ice-9 textual-ports)
             (ice-9 getopt-long)
             (srfi srfi-1)
             (srfi srfi-19))

(define (save-items! items)
  (let ((items-json (work-items->json-string items))
        (port (open items-dir O_WRONLY)))
    (truncate-file port 0)
    (put-string port items-json)
    (close port)))

;; FIXME: There is no error handling here.
(define (main args)
  (let* ((option-spec '((complete (value #t)
                                  (single-char #\c))
                        (add (single-char #\a))
                        (text (value #t)
                              (single-char #\t))
                        (due (value #t)
                             (single-char #\d))
                        (interactive (single-char #\i))
                        (all))) ;;TODO: add more options.
         (options (getopt-long args option-spec)))
    (let ((to-complete (option-ref options 'complete #f))
          (to-add (option-ref options 'add #f))
          (show-all (option-ref options 'all #f)))
      (let* ((items-port (open items-dir O_RDONLY))
             (items-json (get-string-all items-port))
             (items (json-string->work-items items-json)))
        (close items-port)
        (if (not (or to-complete to-add show-all))
            (display (summary-screen items))
            (cond (to-complete (let* ((to-complete-int (string->number to-complete))
                                        (item-to-complete (find (lambda (i) (= (assoc-ref i "id") to-complete-int)) items)))
                                 (save-items!
                                  (work-item-replace item-to-complete (work-item-complete item-to-complete) items))))
                  (to-add (let* ((item-text (option-ref options 'text #f))
                                 (due-str (option-ref options 'due #f))
                                 (interactive? (option-ref options 'interactive #f)))
                            (save-items!
                             (add-work-item-to-lst
                              (if interactive?
                                  (interactive-create-work-item)
                                  (work-item #:text item-text
                                             #:due-date (if due-str (string->date due-str "~d/~m/~Y") #f)))
                              items))))
                  (show-all (show-all-items items)))))))) ;;TODO: Make a much better parser for dates.
