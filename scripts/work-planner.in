#!@GUILE@ \
--no-auto-compile -e main -s
!#

;; Work Planner
;; Copyright (C) 2022 James Crake-Merani
;;;
;;; This program is free software: you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation, either version 3 of the License, or
;;; (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;FIXME: Assumes that this dir already exists.
(define items-dir
  (string-join
   (list (string-append file-name-separator-string "home")
         (getlogin)
         ".local" "share" "work-planner" )
   file-name-separator-string))
(use-modules (work-planner command-line)
             (work-planner date-json)
             (work-planner date-helpers)
             (ice-9 textual-ports)
             (ice-9 getopt-long)
             (ice-9 format)
             (ice-9 readline)
             (srfi srfi-1)
             (srfi srfi-19))

(define (get-items-json-filename directory)
  (string-append directory file-name-separator-string "items.json"))

(define (save-items! items)
  (let ((items-json (work-items->json-string items))
        (port (open (get-items-json-filename items-dir) O_WRONLY)))
    (truncate-file port 0)
    (put-string port items-json)
    (close port)))

;; This is the default for when the file does not exist.
(define (create-empty-work-items-file path)
  ;; If mkdir fails because the dir already exists then this is not a problem. Ignore it.
  (unless (and (file-exists? path) (file-is-directory? path))
    (mkdir items-dir))
  (let ((port (open (get-items-json-filename path) (logior O_CREAT O_WRONLY))))
    (display "[]\n" port)
    (close port)))

(define (load-work-items)
  (let ((items-filename (get-items-json-filename items-dir)))
    (if (file-exists? items-filename)
        (let* ((items-port (open items-filename O_RDONLY))
               (items-json (get-string-all items-port)))
          (close items-port)
          (json-string->work-items items-json))
        (begin
          (create-empty-work-items-file items-dir)
          (load-work-items)))))

(define (complete-items-action! items to-complete) ;;TODO: Perhaps this could be replaced with fold?
  (letrec ((complete-iter (lambda (current-work-items remaining)
                            (if (null? remaining)
                                current-work-items
                                (complete-iter
                                 (complete-action (car remaining) current-work-items)
                                 (cdr remaining))))))
    (save-items! (complete-iter items to-complete))))

(define (complete-action to-complete items)
  (let* ((to-complete-int (string->number to-complete))
         (item-to-complete (find (lambda (i) (= (assoc-ref i "id") to-complete-int)) items)))
    (work-item-replace item-to-complete (work-item-complete item-to-complete) items)))

(define (add-action options items quiet designate-today?)
  (let* ((item-text (option-ref options 'text #f))
         (due-str (option-ref options 'date #f))
         (interactive? (option-ref options 'interactive #f)))
    (if (and (not item-text) (not interactive?))
        (throw 'work-planner-error "You cannot create a work item without text.")) ;; TODO: Will not have an error return code.
    (let* ((new-work-item
            (if interactive?
                (interactive-create-work-item)
                (work-item #:text item-text
                           #:due-date (if due-str (string->date due-str "~d/~m/~Y") #f)
                           #:designated-completion-dates (if designate-today? (current-date) #f))))
           (new-work-items-lst (add-work-item-to-lst new-work-item items)))
      (save-items!
       new-work-items-lst)
      (unless quiet
        ;; For the output, we need to find out what id the new work item was
        ;; given. We're thence assuming that the work item is the car of the new
        ;; list. This will break if that behaviour ever changes!
        (format #t "Work item created with id [~d]~%" (work-item-id (car new-work-items-lst)))))))

(define (designate-items-action! options items items-to-designate)
  (letrec ((designate-iter (lambda (current-work-items to-designate)
                          (if (null? to-designate)
                              current-work-items
                              (designate-iter
                               (designate-action options current-work-items (car to-designate))
                               (cdr to-designate))))))
    (save-items! (designate-iter items items-to-designate)))) ;;TODO: Might rename.

(define (designate-action options items designate)
  (let* ((date-str (option-ref options 'date #f)) ;;TODO: Perhaps create a seperate date field.
         (desig-date (if date-str (string->date date-str "~d/~m/~Y") (current-date)))
         (old-work-item (get-work-item items (string->number designate))))
    (if (past-date? desig-date (current-date) #f)
        (format #t "Warning: you appear to have entered a date which is in the past.~%"))
    (work-item-replace old-work-item (designate-work-item-date old-work-item desig-date) items)))

(define (purge-work-items! options items)
  (let ((no-confirm (option-ref options 'no-confirm #f))
        (new-items (purge-work-items items)))
    (let ((length-new-items (- (length items) (length new-items))))
      (when (= length-new-items 0)
          (throw 'work-planner-error  "There are no items to purge."))
      (if (or no-confirm (string=? (string-upcase (readline (format #f "Are you sure you want to purge ~d items? (y/N): " length-new-items))) "Y"))
          (save-items! new-items)
          (format #t "No work items have been purged.~%")))))

(define (edit-item! options id-str items) ;; Using the 'unchanged symbol because #f means something else in this context.
  (let ((id (string->number id-str)))
    (let ((date-str (option-ref options 'date 'unchanged))
          (new-text (option-ref options 'text 'unchanged))
          (old-item (get-work-item items id)))
      (let ((new-item (work-item
                       #:id id
                       #:text (if (eq? new-text 'unchanged) (work-item-text old-item) new-text)
                       #:due-date (if (eq? date-str 'unchanged) (work-item-due-date old-item) (string->date date-str "~d/~m/~Y"))
                       #:designated-completion-dates (work-item-designated-completion-dates old-item)
                       #:completed (work-item-completed? old-item))))
        (save-items! (work-item-replace old-item new-item items))))))

(define (delete-item! options id-str items)
  (let ((no-confirm (option-ref options 'no-confirm #f))
        (id (string->number id-str))) ;;TODO: Should this be abstracted into its own function?
    (if (or no-confirm (string=? (string-upcase (readline (format #f "Are you sure you want to delete item [~d]? This action is irreversible! (y/N): " id))) "Y"))
        (save-items! (filter (lambda (i) (not (= (work-item-id i) id))) items)))))

(define (action-view-day options date-str items)
  (display (view-day items (string->date date-str "~d/~m/~Y"))))

;; FIXME: There is no error handling here.
(define (main args)
  (catch
    'work-planner-error
    (lambda ()
      (let* ((option-spec '((complete (value #t)
                             (single-char #\c))
                            (add (single-char #\a))
                            (designate-today)
                            (text (value #t)
                                  (single-char #\t))
                            (date (value #t)
                                  (single-char #\d))
                            (interactive (single-char #\i))
                            (all)
                            (purge (single-char #\p))
                            (no-confirm (single-char #\y))
                            (designate (value #t))
                            (quiet (single-char #\q))
                            (edit (single-char #\e)
                                  (value #t))
                            (delete (value #t))
                            (view-day (value #t))))
             (options (getopt-long args option-spec)))
        (let ((to-complete (option-ref options 'complete #f))
              (to-add (option-ref options 'add #f))
              (designate-today? (option-ref options 'designate-today #f))
              (show-all (option-ref options 'all #f))
              (designate (option-ref options 'designate #f))
              (purge (option-ref options 'purge #f))
              (to-edit (option-ref options 'edit #f))
              (to-delete (option-ref options 'delete #f))
              (quiet (option-ref options 'quiet #f))
              (day-to-view (option-ref options 'view-day #f))
              (non-option-args (option-ref options '() '()))
              (items (load-work-items)))
          (cond (to-complete (complete-items-action! items (cons to-complete non-option-args)))
                (to-add (add-action options items quiet designate-today?))
                (designate (designate-items-action! options items (cons designate non-option-args)))
                (show-all (display (show-all-items items)))
                (purge (purge-work-items! options items))
                (to-edit (edit-item! options to-edit items))
                (to-delete (delete-item! options to-delete items))
                (day-to-view (action-view-day options day-to-view items))
                (else (display (summary-screen items)))))))
    (lambda (key . args)
      (format #t "~a~%" (car args)))))
